/*
 * @brief 	Brief description of class or function (fits a single line)
 * @details 	Details about class or function
 * @author <AUTHOR NAME> 	Insert author name
 * @param <PARAM> <DESCR> 	Function or method parameter description
 * @param[in] <PARAM> <DESCR> 	Input parameter (C-function)
 * @param[out] <PARAM> <DESCR> 	Output paramter of C-style function that returns multiple values
 * @param[in, out] <PARAM> <DESCR> 	Parameter used for both input and output in a C-style function.
 * @tparam <PARAM> <DESCR> 	Template type parameter
 * @trhow <EXCEP-DESCR> 	Specify exceptions that a function can throw
 * @pre <DESCR> 	Pre conditions
 * @post <DESCR> 	Post conditions
 * @return <DESCR> 	Description of return value or type.
 * @code … <C++-Code>… @encode 	C++ code example.
 * @remark 	Additional side-notes
 * @note 	Insert additional note
 * @warning 	 
 * @see SomeClass::Method 	Reference to some class, method, or web site
 * @li 	Bullet point
 * @todo <TODO-NOTE> 	TODO annotation, reminders about what is still needs to be done.
 * @details 	Details about class or function
 * @author <AUTHOR NAME> 	Insert author name
 */

///  @brief Solves non-linear equation with Newton method.
   ///
   ///  @tparam T   Any float-point type such as float, double or long double
   ///  @param fun  Non-linear function f(x)
   ///  @param dfun Derivative of non-linear function df(x) = d/dx f(x)
   ///  @param x0   Initial guess 
   ///  @param eps  Tolerance for stopping criteria. 
   ///  @return     Equation result as a float point type T.
   ///
   ///  @details
   ///  Solves non-linear equation using Newton method. This function needs two
   ///  functions, the function to be solved @p fun and its derivate @p dfun
   /// 
   ///  @note     The function f(x) must be continues and differentiable.
   ///  @warning  Throws NonCoverge exception when the root is not found.
   /// 
   ///  @see NewtonSolver
   ///  @see https://en.wikipedia.org/wiki/Newton%27s_method    
   ///
   ///  Example: 
   ///  @code 
   ///    // Solve f(x) = x^2 - 25.0 , df(x) = 2x around x0 = 10.0
   ///    auto fun = [](double x){ return x * x -  25.0 };
   ///    auto dfun = [](double x){ return 2 * x; }
   ///     
   ///    double root = GenericNewtonsolver(fun, dfun, 10.0, 0.001);
   ///    std::cout << "Root = " << root << std::endl;
   ///  @endcode
